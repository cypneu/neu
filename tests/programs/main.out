Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "x", literal: None, line: 2 }, value: Binary { left: Binary { left: Literal(Number(5.0)), op: Token { kind: Star, lexeme: "*", literal: None, line: 2 }, right: Grouping { expression: Binary { left: Literal(Number(3.0)), op: Token { kind: Plus, lexeme: "+", literal: None, line: 2 }, right: Literal(Number(4.0)) } } }, op: Token { kind: Modulo, lexeme: "%", literal: None, line: 2 }, right: Literal(Number(3.0)) } }
Value: Number(2.0)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "y", literal: None, line: 3 }, value: Literal(Number(1234.45)) }
Value: Number(1234.45)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "z", literal: None, line: 4 }, value: Binary { left: Variable { name: Token { kind: Identifier, lexeme: "x", literal: None, line: 4 } }, op: Token { kind: Plus, lexeme: "+", literal: None, line: 4 }, right: Variable { name: Token { kind: Identifier, lexeme: "y", literal: None, line: 4 } } } }
Value: Number(1236.45)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "s1", literal: None, line: 7 }, value: Literal(String("asdf")) }
Value: String("asdf")

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "s2", literal: None, line: 8 }, value: Literal(String("fdas")) }
Value: String("fdas")

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "s3", literal: None, line: 9 }, value: Binary { left: Variable { name: Token { kind: Identifier, lexeme: "s1", literal: None, line: 9 } }, op: Token { kind: Plus, lexeme: "+", literal: None, line: 9 }, right: Variable { name: Token { kind: Identifier, lexeme: "s2", literal: None, line: 9 } } } }
Value: String("asdffdas")

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "a", literal: None, line: 12 }, value: Literal(Boolean(true)) }
Value: Boolean(true)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "b", literal: None, line: 13 }, value: Literal(Boolean(false)) }
Value: Boolean(false)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "x_outer", literal: None, line: 16 }, value: Literal(Number(5.0)) }
Value: Number(5.0)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "x_inner1", literal: None, line: 18 }, value: Literal(Number(4.0)) }
Value: Number(4.0)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "x_inner2", literal: None, line: 20 }, value: Binary { left: Variable { name: Token { kind: Identifier, lexeme: "x_outer", literal: None, line: 20 } }, op: Token { kind: Plus, lexeme: "+", literal: None, line: 20 }, right: Literal(Number(1.0)) } }
Value: Number(6.0)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "x_inner1", literal: None, line: 21 }, value: Literal(Number(5.0)) }
Value: Number(5.0)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "x3", literal: None, line: 23 }, value: Binary { left: Variable { name: Token { kind: Identifier, lexeme: "x_inner1", literal: None, line: 23 } }, op: Token { kind: Plus, lexeme: "+", literal: None, line: 23 }, right: Variable { name: Token { kind: Identifier, lexeme: "x_outer", literal: None, line: 23 } } } }
Value: Number(10.0)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "branch_true", literal: None, line: 28 }, value: Literal(String("ran-true-branch")) }
Value: String("ran-true-branch")

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "positive_branch", literal: None, line: 36 }, value: Literal(Boolean(true)) }
Value: Boolean(true)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "nested_A", literal: None, line: 42 }, value: Literal(String("x-is-two")) }
Value: String("x-is-two")

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "nested_B", literal: None, line: 46 }, value: Literal(String("y-medium")) }
Value: String("y-medium")

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "logic_t_and_t", literal: None, line: 56 }, value: Logical { left: Literal(Boolean(true)), op: Token { kind: And, lexeme: "and", literal: None, line: 56 }, right: Literal(Boolean(true)) } }
Value: Boolean(true)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "logic_t_and_f", literal: None, line: 57 }, value: Logical { left: Literal(Boolean(true)), op: Token { kind: And, lexeme: "and", literal: None, line: 57 }, right: Literal(Boolean(false)) } }
Value: Boolean(false)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "logic_f_and_t", literal: None, line: 58 }, value: Logical { left: Literal(Boolean(false)), op: Token { kind: And, lexeme: "and", literal: None, line: 58 }, right: Literal(Boolean(true)) } }
Value: Boolean(false)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "logic_f_and_f", literal: None, line: 59 }, value: Logical { left: Literal(Boolean(false)), op: Token { kind: And, lexeme: "and", literal: None, line: 59 }, right: Literal(Boolean(false)) } }
Value: Boolean(false)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "logic_or_combo", literal: None, line: 60 }, value: Logical { left: Logical { left: Variable { name: Token { kind: Identifier, lexeme: "logic_t_and_f", literal: None, line: 60 } }, op: Token { kind: Or, lexeme: "or", literal: None, line: 60 }, right: Variable { name: Token { kind: Identifier, lexeme: "logic_f_and_t", literal: None, line: 60 } } }, op: Token { kind: Or, lexeme: "or", literal: None, line: 60 }, right: Variable { name: Token { kind: Identifier, lexeme: "logic_t_and_t", literal: None, line: 60 } } } }
Value: Boolean(true)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "logic_and_prec", literal: None, line: 61 }, value: Logical { left: Variable { name: Token { kind: Identifier, lexeme: "logic_t_and_f", literal: None, line: 61 } }, op: Token { kind: Or, lexeme: "or", literal: None, line: 61 }, right: Logical { left: Literal(Boolean(true)), op: Token { kind: And, lexeme: "and", literal: None, line: 61 }, right: Variable { name: Token { kind: Identifier, lexeme: "logic_t_and_t", literal: None, line: 61 } } } } }
Value: Boolean(true)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "combined_logic_branch", literal: None, line: 64 }, value: Literal(String("logical and comparison true")) }
Value: String("logical and comparison true")

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "counter", literal: None, line: 70 }, value: Literal(Number(0.0)) }
Value: Number(0.0)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "sum_in_loop", literal: None, line: 71 }, value: Literal(Number(0.0)) }
Value: Number(0.0)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "counter", literal: None, line: 73 }, value: Binary { left: Variable { name: Token { kind: Identifier, lexeme: "counter", literal: None, line: 73 } }, op: Token { kind: Plus, lexeme: "+", literal: None, line: 73 }, right: Literal(Number(1.0)) } }
Value: Number(1.0)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "sum_in_loop", literal: None, line: 74 }, value: Binary { left: Variable { name: Token { kind: Identifier, lexeme: "sum_in_loop", literal: None, line: 74 } }, op: Token { kind: Plus, lexeme: "+", literal: None, line: 74 }, right: Variable { name: Token { kind: Identifier, lexeme: "counter", literal: None, line: 74 } } } }
Value: Number(1.0)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "counter", literal: None, line: 73 }, value: Binary { left: Variable { name: Token { kind: Identifier, lexeme: "counter", literal: None, line: 73 } }, op: Token { kind: Plus, lexeme: "+", literal: None, line: 73 }, right: Literal(Number(1.0)) } }
Value: Number(2.0)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "sum_in_loop", literal: None, line: 74 }, value: Binary { left: Variable { name: Token { kind: Identifier, lexeme: "sum_in_loop", literal: None, line: 74 } }, op: Token { kind: Plus, lexeme: "+", literal: None, line: 74 }, right: Variable { name: Token { kind: Identifier, lexeme: "counter", literal: None, line: 74 } } } }
Value: Number(3.0)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "counter", literal: None, line: 73 }, value: Binary { left: Variable { name: Token { kind: Identifier, lexeme: "counter", literal: None, line: 73 } }, op: Token { kind: Plus, lexeme: "+", literal: None, line: 73 }, right: Literal(Number(1.0)) } }
Value: Number(3.0)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "sum_in_loop", literal: None, line: 74 }, value: Binary { left: Variable { name: Token { kind: Identifier, lexeme: "sum_in_loop", literal: None, line: 74 } }, op: Token { kind: Plus, lexeme: "+", literal: None, line: 74 }, right: Variable { name: Token { kind: Identifier, lexeme: "counter", literal: None, line: 74 } } } }
Value: Number(6.0)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "final_counter_val", literal: None, line: 76 }, value: Variable { name: Token { kind: Identifier, lexeme: "counter", literal: None, line: 76 } } }
Value: Number(3.0)

Expr stmt: Assignment { name: Token { kind: Identifier, lexeme: "final_sum_val", literal: None, line: 77 }, value: Variable { name: Token { kind: Identifier, lexeme: "sum_in_loop", literal: None, line: 77 } } }
Value: Number(6.0)

